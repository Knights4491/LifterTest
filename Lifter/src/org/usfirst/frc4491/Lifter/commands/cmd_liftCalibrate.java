// RobotBuilder Version: 1.5
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc4491.Lifter.commands;

import edu.wpi.first.wpilibj.command.Command;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;

import org.usfirst.frc4491.Lifter.Robot;

/**
 *
 */
public class  cmd_liftCalibrate extends Command {
	int m_nbPulseToCalibrate = 0;
	
    public cmd_liftCalibrate(int nbPulseToCalibrate) {
    	m_nbPulseToCalibrate = nbPulseToCalibrate;
        requires(Robot.lift);
    }

    public cmd_liftCalibrate() {
        // Use requires() here to declare subsystem dependencies
        // eg. requires(chassis);

        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
        requires(Robot.lift);

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
    }

    // Called just before this Command runs the first time
    protected void initialize() {
    	// Make sure that the lift starts from the bottom.
    	// If the lift is enabled, it is necessarily at the bottom.
    	if (Robot.lift.isSystemEnabled())
    	{
    		Robot.lift.disableSystem();
    		Robot.lift.moveLiftToCeil();
    	}
    }

    // Called repeatedly when this Command is scheduled to run
    protected void execute() {
    	// Nothing to execute to calibrate.
    }

    // Make this return true when this Command no longer needs to run execute()
    protected boolean isFinished() {
    	// The calibration is done once the desired number
    	// of pulse has been reached.
        return Robot.lift.getCurrentNbPulse() >= m_nbPulseToCalibrate;
    }

    // Called once after isFinished returns true
    protected void end() {
    	SmartDashboard.putNumber("Nb pulse to calibrate", Robot.lift.getCurrentNbPulse());
    	System.out.println("Nb pulse to calibrate = " + Robot.lift.getCurrentNbPulse());
    	// When the number of desired pulse is reached,
    	// stop the motor, but does not reset the system yet.
    	// We need to measure the height that was reached.
    	// We keep the system disabled.
    	Robot.lift.stopLift();
    }

    // Called when another command which requires one or more of the same
    // subsystems is scheduled to run
    protected void interrupted() {
    	// Should not be interrupted.
    	// We keep the system disabled.
    	Robot.lift.stopLift();
    }
}
