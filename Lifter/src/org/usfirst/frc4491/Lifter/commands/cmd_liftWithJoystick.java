// RobotBuilder Version: 1.5
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc4491.Lifter.commands;

import edu.wpi.first.wpilibj.command.Command;
import edu.wpi.first.wpilibj.command.Scheduler;

import org.usfirst.frc4491.Lifter.Robot;

/**
 *
 */
public class  cmd_liftWithJoystick extends Command {
	boolean m_bCommandPressed = false;
	int m_nLastButtonPressed = -1;
	double m_dbLastCommand = 0;

    public cmd_liftWithJoystick() {
        // Use requires() here to declare subsystem dependencies
        // eg. requires(chassis);

        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
        requires(Robot.lift);

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
    }

    // Called just before this Command runs the first time
    protected void initialize() {
    	System.out.println("cmd_liftWithJoystick::initialize - lift enabled=" + Robot.lift.isLiftEnabled() +
														    ", lift at floor=" + Robot.lift.isLiftAtFloor() +
														    ", lift enabling=" + Robot.lift.isLiftEnabling());
    	if (!Robot.lift.isLiftEnabled() &&
    		!Robot.lift.isLiftAtFloor() &&
    		!Robot.lift.isLiftEnabling())
    	{
    		System.out.println("Will goto floor.");
    		Robot.lift.enablingLift();
    		Scheduler.getInstance().add(new cmd_liftGotoFloor());
    	}
    	/*
    	else if (!Robot.lift.isLiftEnabled() && Robot.lift.isLiftAtFloor())
    	{
    		//Robot.lift.enableLift();
    	}*/
    }

    // Called repeatedly when this Command is scheduled to run
    protected void execute() {
    	System.out.println("cmd_liftWithJoystick::execute - lift enabled=" + Robot.lift.isLiftEnabled() +
    												    ", lift at floor=" + Robot.lift.isLiftAtFloor() +
													    ", lift enabling=" + Robot.lift.isLiftEnabling());
    	if (!Robot.lift.isLiftEnabled() &&
    		!Robot.lift.isLiftAtFloor() &&
     		!Robot.lift.isLiftEnabling())
    	{
    		System.out.println("Will goto floor.");
    		Robot.lift.enablingLift();
    		Scheduler.getInstance().add(new cmd_liftGotoFloor());
    	}
    	/*else if (!Robot.lift.isLiftEnabled() && Robot.lift.isLiftAtFloor())
    	{
    		//Robot.lift.enableLift();
    	}*/
    	else if (Robot.lift.isLiftEnabled())
    	{
    		if (Robot.oi.getjoystick_driver().getRawButton(5) &&
    			(!m_bCommandPressed || m_nLastButtonPressed == 5))
    		{
    			m_bCommandPressed = true;
    			m_nLastButtonPressed = 5;
    					
    			double dbSpeed = 20;
    			
    			if (Robot.oi.getjoystick_driver().getRawButton(6))
    			{
    				dbSpeed /= 3;
    			}
    			
    			m_dbLastCommand = Robot.lift.getHeight() - dbSpeed;
    			
    			Robot.lift.setHeight(m_dbLastCommand);
    		}
    		else if (Robot.oi.getjoystick_driver().getRawButton(6) &&
        			(!m_bCommandPressed || m_nLastButtonPressed == 6))
    		{
    			m_bCommandPressed = true;
    			m_nLastButtonPressed = 6;
    					
    			double dbSpeed = 20;
    			
    			if (Robot.oi.getjoystick_driver().getRawButton(5))
    			{
    				dbSpeed /= 3;
    			}
    			
    			m_dbLastCommand = Robot.lift.getHeight() + dbSpeed;
    			
    			Robot.lift.setHeight(m_dbLastCommand);
    		}
    		else if (m_bCommandPressed)
    		{
    			m_bCommandPressed = false;
    			m_nLastButtonPressed = -1;

    			Robot.lift.setHeight(m_dbLastCommand);
    			m_dbLastCommand = 0;
    		}
    	}
    }

    // Make this return true when this Command no longer needs to run execute()
    protected boolean isFinished() {
    	// This is a default command which never ends. Always configure 
        return false;
    }

    // Called once after isFinished returns true
    protected void end() {
    	System.out.println("cmd_liftWithJoystick::end");
    }

    // Called when another command which requires one or more of the same
    // subsystems is scheduled to run
    protected void interrupted() {
    	System.out.println("cmd_liftWithJoystick::interrupted");
    }
}
