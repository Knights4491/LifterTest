// RobotBuilder Version: 1.5
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.

package org.usfirst.frc4491.Lifter.subsystems;

import org.usfirst.frc4491.Lifter.Robot;
import org.usfirst.frc4491.Lifter.RobotMap;
import org.usfirst.frc4491.Lifter.commands.*;

import edu.wpi.first.wpilibj.*;
import edu.wpi.first.wpilibj.command.Subsystem;

/**
 *
 */
public class Lift extends Subsystem {
	int levelGoal;
	
	// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    SpeedController motor_Lift = RobotMap.liftmotor_Lift;
    Encoder encoderLiftHeight = RobotMap.liftencoderLiftHeight;
    DigitalInput limitBottom = RobotMap.liftlimitBottom;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
	// Put methods for controlling this subsystem
	// here. Call these from Commands.

	public void initDefaultCommand() {
		// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND
        setDefaultCommand(new cmd_KeepPosition());

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND

		// Set the default command for a subsystem here.
		// setDefaultCommand(new MySpecialCommand());
	}
	
	public void CheckLevel()
	{
		double current = getLevel();
		if (current < (levelGoal -0.2) )
		{
			SetMotorSpeed(1);
			
		}
		else if(current > (levelGoal +0.2) )
		{
			SetMotorSpeed(-1);
		}
		else{
			SetMotorSpeed(0);
		}
			
	}
	

	public void SetMotorSpeed(double vitesse) {
		motor_Lift.set(vitesse);
	}

	public boolean IsMaxHeight() {
		return false;
	}

	public boolean IsMaxLow() {
		return false;
	}

	public double getLevel() {
		// 1 floor = "1000" encoder count
		return encoderLiftHeight.get() / 1000;
	}
	
	public void checkLevelP(double Proportion) {
		
		double vitesse = Proportion * (getLevel() - levelGoal);
		
		if (Math.abs(getLevel() - levelGoal) > 0.2)
		{
			SetMotorSpeed(vitesse);
		}
		else
		{
			SetMotorSpeed(0);
		}
	}


}
